package com.eomcs.lang.ex05;

//# 증감 연산자 : 후위(post-fix) 증감 연산자 응용 I
//
public class Exam0630 {
  public static void main(String[] args) {
    int i = 7;

    int j = i++;
    /* 대충 더 간단히 이해를 해보자면 변수 int j에 i 값을 먼저 할당하여 j = 7이 되고 그 후 ++를 진행해 i = 8 이 됐다.*/
    
    /*즉 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1. int i = 7;

  2. int j = i;   <-   j = 7 이 여기서 결정.

  3. i += 1;      <-   그후 i에 +1 이 되어 i = 8로 결정. 

  하지만 기억해야 할것은 오른쪽에서 모든 계산이 끝난 다음!!! 마지막에 할당 연산자가 실행 되는 것이다. 

    이런 순서인 것 같다.

    자바는 객체지향언어이기 때문에

    위에서 아래순으로 그리고 왼쪽에서 오른쪽 순으로 먼저 실행이 이루어진다.

    1. int j = i   그 다음 2. ++ 실행.

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    */
    
    // 위 문장은 컴파일될 때 다음과 같은 형태로 변환된다.
    // int temp = i;
    // i = i + 1;
    // int j = temp;
    //
    // 소스 코드 그대로 설명하면 다음과 같이 설명할 수 있다.
    // 그러나 가능한 컴파일 후에 변환된 코드를 그대로 이해하는 게 더 낫다.
    // 1) i 값을 그자리에 놓는다.
    //    => j = 7;
    //    => 7 값을 j에 저장할 수 없다.
    //    => 왜? 아직 = 연산자 오른쪽의 모든 식이 수행되지 않는다.
    // 2) ++ 연산 실행
    //    => 즉 i = i + 1 실행
    //    => i = 8 이 되었다.
    // 3) 할당 연산자 실행
    //    => j <=== 7 실행
    // 할당 연산자는 맨 마지막에 실행!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // 왜냐 r-value쪽에 모든 계산과 연산들이 실행된고 완료된 후 마지막에 할당 연산자가 실행되 r-value가 l-value로 이동 할당 된다.
    // 하지만 이것은 그저 컴퓨터의 계산 방식이고 난 그냥 내가 이해한데로 생각하면 될 것 같다.

    System.out.println(j);
    System.out.println(i);
  }
}
